{"version":3,"sources":["components/Charts/Population.js","components/Charts/Regions.js","containers/CountriesCharts/CountriesCharts.js","store/actions/actions.js","components/Spinner/Spinner.js"],"names":["populationGraph","_ref","popData","populationArray","map","country","population","data","labels","name","datasets","backgroundColor","hoverBackgroundColor","react_default","a","createElement","react_chartjs_2_es","width","height","regionGraph","regions","label","borderColor","borderWidth","hoverBorderColor","countedCountries","count","CountriesCharts","renderGraphs","_this$props","_this","props","topThreeCountries","reactstrap_es","className","style","textAlign","Population","Regions","this","requestCountriesHandler","isPending","Spinner","Component","connect","state","chartsReducer","dispatch","requestCountriesForCharts","__webpack_require__","d","__webpack_exports__","requestCountries","setSearchField","setModalState","modalToggle","startGame","restartGame","answerHandler","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","_actionTypes__WEBPACK_IMPORTED_MODULE_1__","type","actionType","axios","get","then","countries","payload","catch","error","text","obj","num","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","spinner","margin"],"mappings":"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","file":"static/js/4.64bc64f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\n\r\n\r\nconst populationGraph = ({ popData }) => {\r\n    \r\n    const populationArray = popData.map(country => country.population);\r\n    const countriesLabels = popData.map(country => country.name);\r\n\r\n    const data = {\r\n        labels:countriesLabels,\r\n        datasets: [{\r\n            data: populationArray,\r\n            backgroundColor: [\r\n                '#CD6155',\r\n                '#2E86C1',\r\n                '#16A085'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                '#CD6155',\r\n                '#2E86C1',\r\n                '#16A085'\r\n            ]\r\n        }]\r\n    };\r\n\r\n    return <Pie width={100} height={50} data={data} />\r\n}\r\n\r\nexport default populationGraph;","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\n\r\n\r\n\r\nconst regionGraph = ({ regions, countedCountries }) => {\r\n\r\n    const countriesPerRegion = countedCountries.map(country => country.count);\r\n\r\n    const data = {\r\n        labels: regions,\r\n        datasets: [\r\n            {\r\n                label: 'Number Of Countries',\r\n                backgroundColor: '#1b1a1a5c',\r\n                borderColor: '#343a40',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: '#e9ebed',\r\n                hoverBorderColor: '#343a40',\r\n                data: countriesPerRegion\r\n            }\r\n        ]\r\n    };\r\n\r\n    return <Bar data={data} />\r\n}\r\n\r\nexport default regionGraph;\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { requestCountriesForCharts } from '../../store/actions/actions';\r\nimport { Row, Col } from 'reactstrap';\r\nimport PopulationGraph from '../../components/Charts/Population';\r\nimport RegionGraph from '../../components/Charts/Regions';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport './CountriesCharts.css';\r\n\r\n\r\n\r\nclass CountriesCharts extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.requestCountriesHandler();\r\n    }\r\n\r\n    renderGraphs = () => {\r\n        const { topThreeCountries, regions, countedCountries } = this.props;\r\n        return (\r\n            <Row className=\"Charts\">\r\n                <Col className=\"TopThree\">\r\n                    <h2 style={{ textAlign: 'center' }}>Top Highest Population</h2>\r\n                    <PopulationGraph popData={topThreeCountries} />\r\n                </Col>\r\n                <Col>\r\n                    <h2 style={{ textAlign: 'center' }}>Countries Per Continent</h2>\r\n                    <RegionGraph regions={regions} countedCountries={countedCountries} />\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return !this.props.isPending ? this.renderGraphs() : <Spinner />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isPending: state.chartsReducer.isPending,\r\n        topThreeCountries: state.chartsReducer.topThreeCountries,\r\n        regions: state.chartsReducer.regions,\r\n        countedCountries: state.chartsReducer.countedCountries\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        requestCountriesHandler: () => dispatch(requestCountriesForCharts())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountriesCharts);","import axios from 'axios';\r\nimport * as actionType from './actionTypes';\r\n\r\nexport const requestCountries = () => (dispatch) => {\r\n    const url = \"https://restcountries.eu/rest/v2/all?fields=name;flag;alpha3Code;capital;region;population\";\r\n    dispatch({ type: actionType.REQUEST_COUNTRIES_PENDING });\r\n    axios.get(url)\r\n        .then(countries => dispatch({ type: actionType.REQUEST_COUNTRIES_SUCCESS, payload: countries.data }))\r\n        .catch(error => dispatch({ type: actionType.REQUEST_COUNTRIES_FAILED, payload: error }));\r\n};\r\n\r\n//---------------------------------------------------------\r\n\r\n// Country Table Actions.\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: actionType.CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const setModalState = (obj) => ({\r\n    type: actionType.SET_MODAL_STATE,\r\n    payload: obj\r\n});\r\n\r\nexport const modalToggle = () => ({\r\n    type: actionType.MODAL_TOGGLE\r\n});\r\n\r\n//---------------------------------------------------------\r\n\r\n// Flag Game Actions.\r\n\r\nexport const startGame = () => ({\r\n    type: actionType.START_GAME\r\n});\r\n\r\nexport const restartGame = () => ({\r\n    type: actionType.RESTART_GAME\r\n});\r\n\r\nexport const answerHandler = (num) => ({\r\n    type: actionType.ANSWER_HANDLER,\r\n    payload: num + 1\r\n});\r\n\r\n//---------------------------------------------------------\r\n\r\n// Charts Actions\r\n\r\nexport const requestCountriesForCharts = () => (dispatch) => {\r\n    const url = \"https://restcountries.eu/rest/v2/all?fields=name;region;population\";\r\n    dispatch({ type: actionType.REQUEST_COUNTRIES_FOR_CHARTS_PENDING });\r\n    axios.get(url)\r\n        .then(countries => dispatch({ type: actionType.REQUEST_COUNTRIES_FOR_CHARTS_SUCCESS, payload: countries.data }))\r\n        .catch(error => dispatch({ type: actionType.REQUEST_COUNTRIES_FOR_CHARTS_FAILED, payload: error }));\r\n};","import React from 'react';\r\nimport './Spinner.css'\r\n\r\nconst spinner = () => (\r\n    <div style={{ margin: 'auto' }}>\r\n        <div className=\"Loader\"></div>\r\n    </div>\r\n);\r\n\r\nexport default spinner;"],"sourceRoot":""}