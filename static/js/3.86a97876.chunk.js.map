{"version":3,"sources":["components/Spinner/Spinner.js","components/Charts/Population.js","components/Charts/Regions.js","containers/CountriesCharts/CountriesCharts.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","spinner","a","createElement","style","margin","className","populationGraph","_ref","popData","populationArray","map","country","population","data","labels","name","datasets","backgroundColor","hoverBackgroundColor","react_default","react_chartjs_2_es","width","height","regionGraph","regions","label","borderColor","borderWidth","hoverBorderColor","countedCountries","count","CountriesCharts","renderGraphs","_this$props","_this","props","topThreeCountries","reactstrap_es","textAlign","Population","Regions","this","length","requestCountriesHandler","isPending","Spinner","Component","connect","state","chartsReducer","dispatch","requestCountries"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAA,KASeG,IANC,kBACZF,EAAAG,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,SAClBN,EAAAG,EAAAC,cAAA,OAAKG,UAAU,6LCyBRC,EAzBS,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QAEjBC,EAAkBD,EAAQE,IAAI,SAAAC,GAAO,OAAIA,EAAQC,aAGjDC,EAAO,CACTC,OAHoBN,EAAQE,IAAI,SAAAC,GAAO,OAAIA,EAAQI,OAInDC,SAAU,CAAC,CACPH,KAAMJ,EACNQ,gBAAiB,CACb,UACA,UACA,WAEJC,qBAAsB,CAClB,UACA,UACA,cAKZ,OAAOC,EAAAlB,EAAAC,cAACkB,EAAA,EAAD,CAAKC,MAAO,IAAKC,OAAQ,GAAIT,KAAMA,KCC/BU,EAtBK,SAAAhB,GAAmC,IAI7CM,EAAO,CACTC,OAL+CP,EAAhCiB,QAMfR,SAAU,CACN,CACIS,MAAO,sBACPR,gBAAiB,YACjBS,YAAa,UACbC,YAAa,EACbT,qBAAsB,UACtBU,iBAAkB,UAClBf,KAduCN,EAAvBsB,iBAEgBnB,IAAI,SAAAC,GAAO,OAAIA,EAAQmB,WAiBnE,OAAOX,EAAAlB,EAAAC,cAACkB,EAAA,EAAD,CAAKP,KAAMA,cCdhBkB,qNAQFC,aAAe,WAAM,IAAAC,EACwCC,EAAKC,MAAtDC,EADSH,EACTG,kBAAmBZ,EADVS,EACUT,QAASK,EADnBI,EACmBJ,iBACpC,OACIV,EAAAlB,EAAAC,cAACmC,EAAA,EAAD,CAAKhC,UAAU,UACXc,EAAAlB,EAAAC,cAACmC,EAAA,EAAD,CAAKhC,UAAU,YACXc,EAAAlB,EAAAC,cAAA,MAAIC,MAAO,CAAEmC,UAAW,WAAxB,0BACAnB,EAAAlB,EAAAC,cAACqC,EAAD,CAAiB/B,QAAS4B,KAE9BjB,EAAAlB,EAAAC,cAACmC,EAAA,EAAD,KACAlB,EAAAlB,EAAAC,cAAA,MAAIC,MAAO,CAAEmC,UAAW,WAAxB,2BACInB,EAAAlB,EAAAC,cAACsC,EAAD,CAAahB,QAASA,EAASK,iBAAkBA,0FAfxDY,KAAKN,MAAMC,kBAAkBM,QAC9BD,KAAKN,MAAMQ,2DAqBf,OAAQF,KAAKN,MAAMS,UAAkCzB,EAAAlB,EAAAC,cAAC2C,EAAA,EAAD,MAAtBJ,KAAKT,sBAzBdc,cA6CfC,sBAhBS,SAAAC,GACpB,MAAO,CACHJ,UAAWI,EAAMC,cAAcL,UAC/BR,kBAAmBY,EAAMC,cAAcb,kBACvCZ,QAASwB,EAAMC,cAAczB,QAC7BK,iBAAkBmB,EAAMC,cAAcpB,mBAKnB,SAACqB,GACxB,MAAO,CACHP,wBAAyB,kBAAMO,EAASC,kBAIjCJ,CAA6ChB","file":"static/js/3.86a97876.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Spinner.css'\r\n\r\nconst spinner = () => (\r\n    <div style={{ margin: 'auto' }}>\r\n        <div className=\"Loader\"></div>\r\n    </div>\r\n);\r\n\r\nexport default spinner;","import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\n\r\n\r\nconst populationGraph = ({ popData }) => {\r\n    \r\n    const populationArray = popData.map(country => country.population);\r\n    const countriesLabels = popData.map(country => country.name);\r\n\r\n    const data = {\r\n        labels:countriesLabels,\r\n        datasets: [{\r\n            data: populationArray,\r\n            backgroundColor: [\r\n                '#CD6155',\r\n                '#2E86C1',\r\n                '#16A085'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                '#CD6155',\r\n                '#2E86C1',\r\n                '#16A085'\r\n            ]\r\n        }]\r\n    };\r\n\r\n    return <Pie width={100} height={50} data={data} />\r\n}\r\n\r\nexport default populationGraph;","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\n\r\n\r\n\r\nconst regionGraph = ({ regions, countedCountries }) => {\r\n\r\n    const countriesPerRegion = countedCountries.map(country => country.count);\r\n\r\n    const data = {\r\n        labels: regions,\r\n        datasets: [\r\n            {\r\n                label: 'Number Of Countries',\r\n                backgroundColor: '#1b1a1a5c',\r\n                borderColor: '#343a40',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: '#e9ebed',\r\n                hoverBorderColor: '#343a40',\r\n                data: countriesPerRegion\r\n            }\r\n        ]\r\n    };\r\n\r\n    return <Bar data={data} />\r\n}\r\n\r\nexport default regionGraph;\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { requestCountries } from '../../store/actions/actions';\r\nimport { Row, Col } from 'reactstrap';\r\nimport PopulationGraph from '../../components/Charts/Population';\r\nimport RegionGraph from '../../components/Charts/Regions';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport './CountriesCharts.css';\r\n\r\n\r\n\r\nclass CountriesCharts extends Component {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.topThreeCountries.length) {\r\n            this.props.requestCountriesHandler();\r\n        }\r\n    }\r\n\r\n    renderGraphs = () => {\r\n        const { topThreeCountries, regions, countedCountries } = this.props;\r\n        return (\r\n            <Row className=\"Charts\">\r\n                <Col className=\"TopThree\">\r\n                    <h2 style={{ textAlign: 'center' }}>Top Highest Population</h2>\r\n                    <PopulationGraph popData={topThreeCountries} />\r\n                </Col>\r\n                <Col>\r\n                <h2 style={{ textAlign: 'center' }}>Countries Per Continent</h2>\r\n                    <RegionGraph regions={regions} countedCountries={countedCountries} />\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return !this.props.isPending ? this.renderGraphs() : <Spinner />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isPending: state.chartsReducer.isPending,\r\n        topThreeCountries: state.chartsReducer.topThreeCountries,\r\n        regions: state.chartsReducer.regions,\r\n        countedCountries: state.chartsReducer.countedCountries\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        requestCountriesHandler: () => dispatch(requestCountries())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountriesCharts);"],"sourceRoot":""}